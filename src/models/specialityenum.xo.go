// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Specialityenum is the 'specialityenum' enum type from schema 'public'.
type Specialityenum string

const (
	// SpecialityenumCriticalCareMedicine is the 'Critical Care Medicine' Specialityenum.
	SpecialityenumCriticalCareMedicine = Specialityenum("Critical Care Medicine")

	// SpecialityenumDiagnosticRadiology is the 'Diagnostic Radiology' Specialityenum.
	SpecialityenumDiagnosticRadiology = Specialityenum("Diagnostic Radiology")

	// SpecialityenumDermatology is the 'Dermatology' Specialityenum.
	SpecialityenumDermatology = Specialityenum("Dermatology")

	// SpecialityenumCardiology is the 'Cardiology' Specialityenum.
	SpecialityenumCardiology = Specialityenum("Cardiology")

	// SpecialityenumAnesthesiology is the 'Anesthesiology' Specialityenum.
	SpecialityenumAnesthesiology = Specialityenum("Anesthesiology")

	// SpecialityenumCardiovascular is the 'Cardiovascular' Specialityenum.
	SpecialityenumCardiovascular = Specialityenum("Cardiovascular")
)

var SpecialityenumValues = []Specialityenum{SpecialityenumCriticalCareMedicine, SpecialityenumDiagnosticRadiology, SpecialityenumDermatology, SpecialityenumCardiology, SpecialityenumAnesthesiology, SpecialityenumCardiovascular}

// String returns the string value of the Specialityenum.
func (s Specialityenum) String() string {
	return string(s)
}

// MarshalText marshals Specialityenum into text.
func (s Specialityenum) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText unmarshals Specialityenum from text.
func (s *Specialityenum) UnmarshalText(text []byte) error {
	switch string(text) {
	case "Critical Care Medicine":
		*s = SpecialityenumCriticalCareMedicine

	case "Diagnostic Radiology":
		*s = SpecialityenumDiagnosticRadiology

	case "Dermatology":
		*s = SpecialityenumDermatology

	case "Cardiology":
		*s = SpecialityenumCardiology

	case "Anesthesiology":
		*s = SpecialityenumAnesthesiology

	case "Cardiovascular":
		*s = SpecialityenumCardiovascular

	default:
		return errors.New("invalid Specialityenum")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Specialityenum.
func (s Specialityenum) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Specialityenum.
func (s *Specialityenum) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Specialityenum")
	}

	return s.UnmarshalText(buf)
}
