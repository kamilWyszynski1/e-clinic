{"remainingRequest":"/home/kamil/go/src/e-clinic/src/front2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/kamil/go/src/e-clinic/src/front2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kamil/go/src/e-clinic/src/front2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kamil/go/src/e-clinic/src/front2/src/views/Appointments.vue?vue&type=template&id=45b08fee&scoped=true&","dependencies":[{"path":"/home/kamil/go/src/e-clinic/src/front2/src/views/Appointments.vue","mtime":1610198350915},{"path":"/home/kamil/go/src/e-clinic/src/front2/node_modules/cache-loader/dist/cjs.js","mtime":1593024481129},{"path":"/home/kamil/go/src/e-clinic/src/front2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606043535851},{"path":"/home/kamil/go/src/e-clinic/src/front2/node_modules/cache-loader/dist/cjs.js","mtime":1593024481129},{"path":"/home/kamil/go/src/e-clinic/src/front2/node_modules/vue-loader/lib/index.js","mtime":1606043535851}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}