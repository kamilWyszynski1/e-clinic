// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	uuid "github.com/satori/go.uuid"
)

// Payment represents a row from 'public.payment'.
var (
	PaymentFields  = ` id, appointment, price, order_id, status `
	PaymentColumns = []string{"id", "appointment", "price", "order_id", "status"}
)

type Payment struct {
	ID          uuid.UUID `json:"id,omitempty"`          // id
	Appointment uuid.UUID `json:"appointment,omitempty"` // appointment
	Price       float64   `json:"price,omitempty"`       // price
	OrderID     string    `json:"order_id,omitempty"`    // order_id
	Status      string    `json:"status,omitempty"`      // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Payment exists in the database.
func (p *Payment) Exists() bool {
	return p._exists
}

// Only for tests usage!
func (p *Payment) TestOnly_SetExists() {
	p._exists = true
}

// Only for tests usage!
func (p *Payment) TestOnly_SetDeleted() {
	p._deleted = true
}

// Deleted provides information if the Payment has been deleted from the database.
func (p *Payment) Deleted() bool {
	return p._deleted
}

// Insert inserts the Payment to the database.
func (p *Payment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.payment (` +
		`id, appointment, price, order_id, status` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.ID, p.Appointment, p.Price, p.OrderID, p.Status)
	err = db.QueryRow(sqlstr, p.ID, p.Appointment, p.Price, p.OrderID, p.Status).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Payment in the database.
func (p *Payment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payment SET (` +
		`appointment, price, order_id, status` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, p.Appointment, p.Price, p.OrderID, p.Status, p.ID)
	_, err = db.Exec(sqlstr, p.Appointment, p.Price, p.OrderID, p.Status, p.ID)
	return err
}

// Save saves the Payment to the database.
func (p *Payment) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Payment.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Payment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payment (` +
		`id, appointment, price, order_id, status` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, appointment, price, order_id, status` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.appointment, EXCLUDED.price, EXCLUDED.order_id, EXCLUDED.status` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Appointment, p.Price, p.OrderID, p.Status)
	_, err = db.Exec(sqlstr, p.ID, p.Appointment, p.Price, p.OrderID, p.Status)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Payment from the database.
func (p *Payment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payment WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// AppointmentByPaymentAppointmentFkey returns the Appointment associated with the Payment's Appointment (appointment).
//
// Generated from foreign key 'payment_appointment_fkey'.
func (p *Payment) AppointmentByPaymentAppointmentFkey(db XODB) (*Appointment, error) {

	return AppointmentByID(db, p.Appointment)

}

// PaymentByID retrieves a row from 'public.payment' as a Payment.
//
// Generated from index 'payment_pkey'.
func PaymentByID(db XODB, id uuid.UUID) (*Payment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, appointment, price, order_id, status ` +
		`FROM public.payment ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Payment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Appointment, &p.Price, &p.OrderID, &p.Status)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
