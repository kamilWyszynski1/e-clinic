// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	uuid "github.com/satori/go.uuid"
)

// Appointment represents a row from 'public.appointment'.
var (
	AppointmentFields  = ` id, state, patient, specialist_fee, scheduled_time, duration `
	AppointmentColumns = []string{"id", "state", "patient", "specialist_fee", "scheduled_time", "duration"}
)

type Appointment struct {
	ID            uuid.UUID            `json:"id,omitempty"`             // id
	State         Apoitntmentstateenum `json:"state,omitempty"`          // state
	Patient       uuid.UUID            `json:"patient,omitempty"`        // patient
	SpecialistFee uuid.UUID            `json:"specialist_fee,omitempty"` // specialist_fee
	ScheduledTime time.Time            `json:"scheduled_time,omitempty"` // scheduled_time
	Duration      int                  `json:"duration,omitempty"`       // duration

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Appointment exists in the database.
func (a *Appointment) Exists() bool {
	return a._exists
}

// Only for tests usage!
func (a *Appointment) TestOnly_SetExists() {
	a._exists = true
}

// Only for tests usage!
func (a *Appointment) TestOnly_SetDeleted() {
	a._deleted = true
}

// Deleted provides information if the Appointment has been deleted from the database.
func (a *Appointment) Deleted() bool {
	return a._deleted
}

// Insert inserts the Appointment to the database.
func (a *Appointment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.appointment (` +
		`id, state, patient, specialist_fee, scheduled_time, duration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, a.ID, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration)
	err = db.QueryRow(sqlstr, a.ID, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Appointment in the database.
func (a *Appointment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.appointment SET (` +
		`state, patient, specialist_fee, scheduled_time, duration` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration, a.ID)
	_, err = db.Exec(sqlstr, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration, a.ID)
	return err
}

// Save saves the Appointment to the database.
func (a *Appointment) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Appointment.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Appointment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.appointment (` +
		`id, state, patient, specialist_fee, scheduled_time, duration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, state, patient, specialist_fee, scheduled_time, duration` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.state, EXCLUDED.patient, EXCLUDED.specialist_fee, EXCLUDED.scheduled_time, EXCLUDED.duration` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration)
	_, err = db.Exec(sqlstr, a.ID, a.State, a.Patient, a.SpecialistFee, a.ScheduledTime, a.Duration)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Appointment from the database.
func (a *Appointment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.appointment WHERE id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// PatientByAppointmentPatientFkey returns the Patient associated with the Appointment's Patient (patient).
//
// Generated from foreign key 'appointment_patient_fkey'.
func (a *Appointment) PatientByAppointmentPatientFkey(db XODB) (*Patient, error) {

	return PatientByID(db, a.Patient)

}

// SpecialistFeeByAppointmentSpecialistFeeFkey returns the SpecialistFee associated with the Appointment's SpecialistFee (specialist_fee).
//
// Generated from foreign key 'appointment_specialist_fee_fkey'.
func (a *Appointment) SpecialistFeeByAppointmentSpecialistFeeFkey(db XODB) (*SpecialistFee, error) {

	return SpecialistFeeByID(db, a.SpecialistFee)

}

// AppointmentByID retrieves a row from 'public.appointment' as a Appointment.
//
// Generated from index 'appointment_pkey'.
func AppointmentByID(db XODB, id uuid.UUID) (*Appointment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, state, patient, specialist_fee, scheduled_time, duration ` +
		`FROM public.appointment ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Appointment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.State, &a.Patient, &a.SpecialistFee, &a.ScheduledTime, &a.Duration)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
