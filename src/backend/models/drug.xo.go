// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Drug represents a row from 'public.drug'.
var (
	DrugFields  = ` id, name, type_of_preparation, common_name, strength, shape `
	DrugColumns = []string{"id", "name", "type_of_preparation", "common_name", "strength", "shape"}
)

type Drug struct {
	ID                int    `json:"id,omitempty"`                  // id
	Name              string `json:"name,omitempty"`                // name
	TypeOfPreparation string `json:"type_of_preparation,omitempty"` // type_of_preparation
	CommonName        string `json:"common_name,omitempty"`         // common_name
	Strength          string `json:"strength,omitempty"`            // strength
	Shape             string `json:"shape,omitempty"`               // shape

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Drug exists in the database.
func (d *Drug) Exists() bool {
	return d._exists
}

// Only for tests usage!
func (d *Drug) TestOnly_SetExists() {
	d._exists = true
}

// Only for tests usage!
func (d *Drug) TestOnly_SetDeleted() {
	d._deleted = true
}

// Deleted provides information if the Drug has been deleted from the database.
func (d *Drug) Deleted() bool {
	return d._deleted
}

// Insert inserts the Drug to the database.
func (d *Drug) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.drug (` +
		`id, name, type_of_preparation, common_name, strength, shape` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, d.ID, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape)
	err = db.QueryRow(sqlstr, d.ID, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape).Scan(&d.ID)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Update updates the Drug in the database.
func (d *Drug) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.drug SET (` +
		`name, type_of_preparation, common_name, strength, shape` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape, d.ID)
	_, err = db.Exec(sqlstr, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape, d.ID)
	return err
}

// Save saves the Drug to the database.
func (d *Drug) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Upsert performs an upsert for Drug.
//
// NOTE: PostgreSQL 9.5+ only
func (d *Drug) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.drug (` +
		`id, name, type_of_preparation, common_name, strength, shape` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, type_of_preparation, common_name, strength, shape` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.type_of_preparation, EXCLUDED.common_name, EXCLUDED.strength, EXCLUDED.shape` +
		`)`

	// run query
	XOLog(sqlstr, d.ID, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape)
	_, err = db.Exec(sqlstr, d.ID, d.Name, d.TypeOfPreparation, d.CommonName, d.Strength, d.Shape)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Delete deletes the Drug from the database.
func (d *Drug) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.drug WHERE id = $1`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// DrugByID retrieves a row from 'public.drug' as a Drug.
//
// Generated from index 'drug_pkey'.
func DrugByID(db XODB, id int) (*Drug, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, type_of_preparation, common_name, strength, shape ` +
		`FROM public.drug ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	d := Drug{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&d.ID, &d.Name, &d.TypeOfPreparation, &d.CommonName, &d.Strength, &d.Shape)
	if err != nil {
		return nil, err
	}

	return &d, nil
}

// DrugsByLoweredNameInx retrieves a row from 'public.drug' as a Drug.
//
// Generated from index 'lowered_name_inx'.
func DrugsByLoweredNameInx(db XODB, name string) ([]*Drug, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, type_of_preparation, common_name, strength, shape ` +
		`FROM public.drug ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Drug{}
	for q.Next() {
		d := Drug{
			_exists: true,
		}

		// scan
		err = q.Scan(&d.ID, &d.Name, &d.TypeOfPreparation, &d.CommonName, &d.Strength, &d.Shape)
		if err != nil {
			return nil, err
		}

		res = append(res, &d)
	}

	return res, nil
}
