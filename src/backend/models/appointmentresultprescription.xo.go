// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	uuid "github.com/satori/go.uuid"
)

// AppointmentResultPrescription represents a row from 'public.appointment_result_prescription'.
var (
	AppointmentResultPrescriptionFields  = ` id, appointment_result, drug, dosing `
	AppointmentResultPrescriptionColumns = []string{"id", "appointment_result", "drug", "dosing"}
)

type AppointmentResultPrescription struct {
	ID                uuid.UUID `json:"id,omitempty"`                 // id
	AppointmentResult uuid.UUID `json:"appointment_result,omitempty"` // appointment_result
	Drug              int       `json:"drug,omitempty"`               // drug
	Dosing            string    `json:"dosing,omitempty"`             // dosing

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AppointmentResultPrescription exists in the database.
func (arp *AppointmentResultPrescription) Exists() bool {
	return arp._exists
}

// Only for tests usage!
func (arp *AppointmentResultPrescription) TestOnly_SetExists() {
	arp._exists = true
}

// Only for tests usage!
func (arp *AppointmentResultPrescription) TestOnly_SetDeleted() {
	arp._deleted = true
}

// Deleted provides information if the AppointmentResultPrescription has been deleted from the database.
func (arp *AppointmentResultPrescription) Deleted() bool {
	return arp._deleted
}

// Insert inserts the AppointmentResultPrescription to the database.
func (arp *AppointmentResultPrescription) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if arp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.appointment_result_prescription (` +
		`id, appointment_result, drug, dosing` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, arp.ID, arp.AppointmentResult, arp.Drug, arp.Dosing)
	err = db.QueryRow(sqlstr, arp.ID, arp.AppointmentResult, arp.Drug, arp.Dosing).Scan(&arp.ID)
	if err != nil {
		return err
	}

	// set existence
	arp._exists = true

	return nil
}

// Update updates the AppointmentResultPrescription in the database.
func (arp *AppointmentResultPrescription) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !arp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if arp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.appointment_result_prescription SET (` +
		`appointment_result, drug, dosing` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, arp.AppointmentResult, arp.Drug, arp.Dosing, arp.ID)
	_, err = db.Exec(sqlstr, arp.AppointmentResult, arp.Drug, arp.Dosing, arp.ID)
	return err
}

// Save saves the AppointmentResultPrescription to the database.
func (arp *AppointmentResultPrescription) Save(db XODB) error {
	if arp.Exists() {
		return arp.Update(db)
	}

	return arp.Insert(db)
}

// Upsert performs an upsert for AppointmentResultPrescription.
//
// NOTE: PostgreSQL 9.5+ only
func (arp *AppointmentResultPrescription) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if arp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.appointment_result_prescription (` +
		`id, appointment_result, drug, dosing` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, appointment_result, drug, dosing` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.appointment_result, EXCLUDED.drug, EXCLUDED.dosing` +
		`)`

	// run query
	XOLog(sqlstr, arp.ID, arp.AppointmentResult, arp.Drug, arp.Dosing)
	_, err = db.Exec(sqlstr, arp.ID, arp.AppointmentResult, arp.Drug, arp.Dosing)
	if err != nil {
		return err
	}

	// set existence
	arp._exists = true

	return nil
}

// Delete deletes the AppointmentResultPrescription from the database.
func (arp *AppointmentResultPrescription) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !arp._exists {
		return nil
	}

	// if deleted, bail
	if arp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.appointment_result_prescription WHERE id = $1`

	// run query
	XOLog(sqlstr, arp.ID)
	_, err = db.Exec(sqlstr, arp.ID)
	if err != nil {
		return err
	}

	// set deleted
	arp._deleted = true

	return nil
}

// AppointmentResultByAppointmentResultPrescriptionAppointmentResultFkey returns the AppointmentResult associated with the AppointmentResultPrescription's AppointmentResult (appointment_result).
//
// Generated from foreign key 'appointment_result_prescription_appointment_result_fkey'.
func (arp *AppointmentResultPrescription) AppointmentResultByAppointmentResultPrescriptionAppointmentResultFkey(db XODB) (*AppointmentResult, error) {

	return AppointmentResultByID(db, arp.AppointmentResult)

}

// DrugByAppointmentResultPrescriptionDrugFkey returns the Drug associated with the AppointmentResultPrescription's Drug (drug).
//
// Generated from foreign key 'appointment_result_prescription_drug_fkey'.
func (arp *AppointmentResultPrescription) DrugByAppointmentResultPrescriptionDrugFkey(db XODB) (*Drug, error) {

	return DrugByID(db, arp.Drug)

}

// AppointmentResultPrescriptionByID retrieves a row from 'public.appointment_result_prescription' as a AppointmentResultPrescription.
//
// Generated from index 'appointment_result_prescription_pkey'.
func AppointmentResultPrescriptionByID(db XODB, id uuid.UUID) (*AppointmentResultPrescription, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, appointment_result, drug, dosing ` +
		`FROM public.appointment_result_prescription ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	arp := AppointmentResultPrescription{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&arp.ID, &arp.AppointmentResult, &arp.Drug, &arp.Dosing)
	if err != nil {
		return nil, err
	}

	return &arp, nil
}
