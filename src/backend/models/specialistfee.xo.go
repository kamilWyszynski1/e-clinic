// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	uuid "github.com/satori/go.uuid"
)

// SpecialistFee represents a row from 'public.specialist_fee'.
var (
	SpecialistFeeFields  = ` id, specialist, speciality, fee_per_30_min `
	SpecialistFeeColumns = []string{"id", "specialist", "speciality", "fee_per_30_min"}
)

type SpecialistFee struct {
	ID          uuid.UUID      `json:"id,omitempty"`             // id
	Specialist  uuid.UUID      `json:"specialist,omitempty"`     // specialist
	Speciality  Specialityenum `json:"speciality,omitempty"`     // speciality
	FeePer30Min float64        `json:"fee_per_30_min,omitempty"` // fee_per_30_min

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SpecialistFee exists in the database.
func (sf *SpecialistFee) Exists() bool {
	return sf._exists
}

// Only for tests usage!
func (sf *SpecialistFee) TestOnly_SetExists() {
	sf._exists = true
}

// Only for tests usage!
func (sf *SpecialistFee) TestOnly_SetDeleted() {
	sf._deleted = true
}

// Deleted provides information if the SpecialistFee has been deleted from the database.
func (sf *SpecialistFee) Deleted() bool {
	return sf._deleted
}

// Insert inserts the SpecialistFee to the database.
func (sf *SpecialistFee) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.specialist_fee (` +
		`id, specialist, speciality, fee_per_30_min` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, sf.ID, sf.Specialist, sf.Speciality, sf.FeePer30Min)
	err = db.QueryRow(sqlstr, sf.ID, sf.Specialist, sf.Speciality, sf.FeePer30Min).Scan(&sf.ID)
	if err != nil {
		return err
	}

	// set existence
	sf._exists = true

	return nil
}

// Update updates the SpecialistFee in the database.
func (sf *SpecialistFee) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.specialist_fee SET (` +
		`specialist, speciality, fee_per_30_min` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, sf.Specialist, sf.Speciality, sf.FeePer30Min, sf.ID)
	_, err = db.Exec(sqlstr, sf.Specialist, sf.Speciality, sf.FeePer30Min, sf.ID)
	return err
}

// Save saves the SpecialistFee to the database.
func (sf *SpecialistFee) Save(db XODB) error {
	if sf.Exists() {
		return sf.Update(db)
	}

	return sf.Insert(db)
}

// Upsert performs an upsert for SpecialistFee.
//
// NOTE: PostgreSQL 9.5+ only
func (sf *SpecialistFee) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if sf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.specialist_fee (` +
		`id, specialist, speciality, fee_per_30_min` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, specialist, speciality, fee_per_30_min` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.specialist, EXCLUDED.speciality, EXCLUDED.fee_per_30_min` +
		`)`

	// run query
	XOLog(sqlstr, sf.ID, sf.Specialist, sf.Speciality, sf.FeePer30Min)
	_, err = db.Exec(sqlstr, sf.ID, sf.Specialist, sf.Speciality, sf.FeePer30Min)
	if err != nil {
		return err
	}

	// set existence
	sf._exists = true

	return nil
}

// Delete deletes the SpecialistFee from the database.
func (sf *SpecialistFee) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sf._exists {
		return nil
	}

	// if deleted, bail
	if sf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.specialist_fee WHERE id = $1`

	// run query
	XOLog(sqlstr, sf.ID)
	_, err = db.Exec(sqlstr, sf.ID)
	if err != nil {
		return err
	}

	// set deleted
	sf._deleted = true

	return nil
}

// SpecialistBySpecialistFeeSpecialistFkey returns the Specialist associated with the SpecialistFee's Specialist (specialist).
//
// Generated from foreign key 'specialist_fee_specialist_fkey'.
func (sf *SpecialistFee) SpecialistBySpecialistFeeSpecialistFkey(db XODB) (*Specialist, error) {

	return SpecialistByID(db, sf.Specialist)

}

// SpecialistFeeByID retrieves a row from 'public.specialist_fee' as a SpecialistFee.
//
// Generated from index 'specialist_fee_pkey'.
func SpecialistFeeByID(db XODB, id uuid.UUID) (*SpecialistFee, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, specialist, speciality, fee_per_30_min ` +
		`FROM public.specialist_fee ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	sf := SpecialistFee{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sf.ID, &sf.Specialist, &sf.Speciality, &sf.FeePer30Min)
	if err != nil {
		return nil, err
	}

	return &sf, nil
}
