// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	uuid "github.com/satori/go.uuid"
)

// AppointmentForm represents a row from 'public.appointment_form'.
var (
	AppointmentFormFields  = ` id, appointment, comment, symptoms `
	AppointmentFormColumns = []string{"id", "appointment", "comment", "symptoms"}
)

type AppointmentForm struct {
	ID          uuid.UUID   `json:"id,omitempty"`          // id
	Appointment uuid.UUID   `json:"appointment,omitempty"` // appointment
	Comment     string      `json:"comment,omitempty"`     // comment
	Symptoms    StringSlice `json:"symptoms,omitempty"`    // symptoms

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AppointmentForm exists in the database.
func (af *AppointmentForm) Exists() bool {
	return af._exists
}

// Only for tests usage!
func (af *AppointmentForm) TestOnly_SetExists() {
	af._exists = true
}

// Only for tests usage!
func (af *AppointmentForm) TestOnly_SetDeleted() {
	af._deleted = true
}

// Deleted provides information if the AppointmentForm has been deleted from the database.
func (af *AppointmentForm) Deleted() bool {
	return af._deleted
}

// Insert inserts the AppointmentForm to the database.
func (af *AppointmentForm) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if af._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.appointment_form (` +
		`id, appointment, comment, symptoms` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, af.ID, af.Appointment, af.Comment, af.Symptoms)
	err = db.QueryRow(sqlstr, af.ID, af.Appointment, af.Comment, af.Symptoms).Scan(&af.ID)
	if err != nil {
		return err
	}

	// set existence
	af._exists = true

	return nil
}

// Update updates the AppointmentForm in the database.
func (af *AppointmentForm) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !af._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if af._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.appointment_form SET (` +
		`appointment, comment, symptoms` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, af.Appointment, af.Comment, af.Symptoms, af.ID)
	_, err = db.Exec(sqlstr, af.Appointment, af.Comment, af.Symptoms, af.ID)
	return err
}

// Save saves the AppointmentForm to the database.
func (af *AppointmentForm) Save(db XODB) error {
	if af.Exists() {
		return af.Update(db)
	}

	return af.Insert(db)
}

// Upsert performs an upsert for AppointmentForm.
//
// NOTE: PostgreSQL 9.5+ only
func (af *AppointmentForm) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if af._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.appointment_form (` +
		`id, appointment, comment, symptoms` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, appointment, comment, symptoms` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.appointment, EXCLUDED.comment, EXCLUDED.symptoms` +
		`)`

	// run query
	XOLog(sqlstr, af.ID, af.Appointment, af.Comment, af.Symptoms)
	_, err = db.Exec(sqlstr, af.ID, af.Appointment, af.Comment, af.Symptoms)
	if err != nil {
		return err
	}

	// set existence
	af._exists = true

	return nil
}

// Delete deletes the AppointmentForm from the database.
func (af *AppointmentForm) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !af._exists {
		return nil
	}

	// if deleted, bail
	if af._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.appointment_form WHERE id = $1`

	// run query
	XOLog(sqlstr, af.ID)
	_, err = db.Exec(sqlstr, af.ID)
	if err != nil {
		return err
	}

	// set deleted
	af._deleted = true

	return nil
}

// AppointmentByAppointmentFormAppointmentFkey returns the Appointment associated with the AppointmentForm's Appointment (appointment).
//
// Generated from foreign key 'appointment_form_appointment_fkey'.
func (af *AppointmentForm) AppointmentByAppointmentFormAppointmentFkey(db XODB) (*Appointment, error) {

	return AppointmentByID(db, af.Appointment)

}

// AppointmentFormByID retrieves a row from 'public.appointment_form' as a AppointmentForm.
//
// Generated from index 'appointment_form_pkey'.
func AppointmentFormByID(db XODB, id uuid.UUID) (*AppointmentForm, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, appointment, comment, symptoms ` +
		`FROM public.appointment_form ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	af := AppointmentForm{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&af.ID, &af.Appointment, &af.Comment, &af.Symptoms)
	if err != nil {
		return nil, err
	}

	return &af, nil
}
